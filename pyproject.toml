[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "spiking-fpga-toolchain"
version = "0.1.0-dev"
description = "Open-source toolchain for compiling spiking neural networks to FPGA hardware"
authors = [
    {name = "Spiking-FPGA-Toolchain Contributors"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
keywords = ["neuromorphic", "fpga", "spiking neural networks", "hardware acceleration"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Hardware",
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.24.0",
    "PyYAML>=6.0",
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "networkx>=3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=2.0.0",
]
vivado = [
    "cocotb>=1.8.0",
    "cocotb-test>=0.2.4",
]
quartus = [
    "modelsim-python>=0.1.0",
]

[project.urls]
Homepage = "https://github.com/danieleschmidt/Spiking-FPGA-Toolchain"
Documentation = "https://spiking-fpga-toolchain.readthedocs.io"
Repository = "https://github.com/danieleschmidt/Spiking-FPGA-Toolchain"
Issues = "https://github.com/danieleschmidt/Spiking-FPGA-Toolchain/issues"

[project.scripts]
spiking-fpga = "spiking_fpga.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "hardware: marks tests that require FPGA hardware",
    "vivado: marks tests requiring Xilinx Vivado",
    "quartus: marks tests requiring Intel Quartus",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]